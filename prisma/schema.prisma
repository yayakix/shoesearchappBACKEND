// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// local
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id         String @id @default(cuid())
  email      String @unique
  name       String
  avatar_url String
  username   String
  clerkId    String @unique

  favoriteShoes UsersToShoesFavorites[]
  createdShoes  Shoe[]
}

model Shoe {
  id          String  @id @default(cuid())
  price       String
  name        String
  description String
  url         String
  image       String?

  favoritedBy UsersToShoesFavorites[]
  tags        ShoesToTags[]
  createdBy   User                    @relation(fields: [createdById], references: [id])
  createdById String
}

model Tags {
  id    String        @id @default(cuid())
  text  String
  shoes ShoesToTags[]
}

model UsersToShoesFavorites {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  shoe       Shoe     @relation(fields: [shoeId], references: [id], onDelete: Cascade)
  shoeId     String
  assignedAt DateTime @default(now())
}

model ShoesToTags {
  id         String   @id @default(cuid())
  tag        Tags?    @relation(fields: [tagId], references: [id]) // Make tag optional
  tagId      String?
  shoe       Shoe?    @relation(fields: [shoeId], references: [id]) // Make shoe optional
  shoeId     String?
  assignedAt DateTime @default(now())
}
